// MIXINS
// -------------------------------------------------------------------------------------------------

// Utilities
// ----------

// The good & old clearfix hack we all know.
// http://nicolasgallagher.com/micro-clearfix-hack/
.clear-float() {
  &:before,
  &:after {
    content: " ";
    display: table;
  }
  &:after {
    clear: both;
  }
}

// Text Overflow - requires display: inline-block or block to work
.text-overflow() {
  overflow: hidden;
  text-overflow: ellipsis;
  white-space: nowrap;
}

.tab-focus() {
  // Default
  outline: thin dotted #333;
  // Webkit
  outline: 5px auto -webkit-focus-ring-color;
  outline-offset: -2px;
}

// Vendor Prefix Helpers
// ---------------------

// user-select
.user-select( @select ) {
  -webkit-user-select: @select;
     -moz-user-select: @select;
      -ms-user-select: @select;
       -o-user-select: @select;
          user-select: @select;
}

// border-radius - single side
.border-top-radius( @radius ) {
  border-top-left-radius: @radius;
  border-top-right-radius: @radius;
}

.border-left-radius( @radius ) {
  border-top-left-radius: @radius;
  border-bottom-left-radius: @radius;
}

.border-right-radius( @radius ) {
  border-top-right-radius: @radius;
  border-bottom-right-radius: @radius;
}

.border-bottom-radius( @radius ) {
  border-bottom-left-radius: @radius;
  border-bottom-right-radius: @radius;
}

// box-shadow
.box-shadow( @shadow ) {
  -webkit-box-shadow+: @shadow; // iOS < 4.3 & Android < 4.1
          box-shadow+: @shadow;
}

// transform
.transform( @transform ) {
  -webkit-transform: @transform;
     -moz-transform: @transform;
          transform: @transform;
}

// transition
.transition( @transition ) {
  -webkit-transition: @transition;
     -moz-transition: @transition;
       -o-transition: @transition;
          transition: @transition;
}

// box-sizing
.box-sizing( @boxmodel ) {
  -webkit-box-sizing: @boxmodel;
     -moz-box-sizing: @boxmodel;
          box-sizing: @boxmodel;
}

// hyphenation
.hyphens( @mode: auto ) {
  word-wrap: break-word;
  -webkit-hyphens: @mode;
     -moz-hyphens: @mode;
      -ms-hyphens: @mode;
       -o-hyphens: @mode;
          hyphens: @mode;
}

// animation
.animation( @animation ) {
  -webkit-animation: @animation;
     -moz-animation: @animation;
      -ms-animation: @animation;
       -o-animation: @animation;
          animation: @animation;
}

// input placeholder
.placeholder( @color: @input-placeholder-color ) {
  &:-moz-placeholder            { color: @color; }
  &::-moz-placeholder           { color: @color; }
  &:-ms-input-placeholder       { color: @color; }
  &::-webkit-input-placeholder  { color: @color; }
}

// Gradients
// ---------

#gradient {
  .horizontal( @start-color, @end-color ) {
    background-color: @end-color;
    background-image: -webkit-linear-gradient( left, @start-color, @end-color ); // Safari 5.1+, Chrome 10+
    background-image: -webkit-gradient( linear, 0 0, 100% 0, from( @start-color ), to( @end-color ) ); // Safari 4+, Chrome 2+
    background-image: -moz-linear-gradient( left, @start-color, @end-color ); // FF 3.6+
    background-image: -o-linear-gradient( left, @start-color, @end-color ); // Opera 11.10
    background-image: linear-gradient( to right, @start-color, @end-color ); // Standard, IE10
    background-repeat: repeat-x;
    filter: e( %( "progid:DXImageTransform.Microsoft.gradient(start-colorstr='%d', end-colorstr='%d', GradientType=1)", argb( @start-color ), argb( @end-color ) ) ); // IE9 and down
  }

  .vertical( @start-color, @end-color ) {
    background-color: @end-color;
    background-image: -webkit-linear-gradient( top, @start-color, @end-color ); // Safari 5.1+, Chrome 10+
    background-image: -webkit-gradient( linear, 0 0, 0 100%, from( @start-color ), to( @end-color ) ); // Safari 4+, Chrome 2+
    background-image: -moz-linear-gradient( top, @start-color, @end-color ); // FF 3.6+
    background-image: -o-linear-gradient( top, @start-color, @end-color ); // Opera 11.10
    background-image: linear-gradient( to bottom, @start-color, @end-color ); // Standard, IE10
    background-repeat: repeat-x;
    filter: e( %( "progid:DXImageTransform.Microsoft.gradient(start-colorstr='%d', end-colorstr='%d', GradientType=0)", argb( @start-color ), argb( @end-color ) ) ); // IE9 and down
  }

  .striped( @stripe-color, @angle: 45deg ) {
    background-image: -webkit-gradient( linear, 0 100%, 100% 0, color-stop( .25, @stripe-color ), color-stop( .25, transparent ), color-stop( .5, transparent ), color-stop( .5, @stripe-color ), color-stop( .75, @stripe-color ), color-stop( .75, transparent ), to( transparent ) );
    background-image: -webkit-linear-gradient( @angle, @stripe-color 25%, transparent 25%, transparent 50%, @stripe-color 50%, @stripe-color 75%, transparent 75%, transparent );
    background-image: -moz-linear-gradient( @angle, @stripe-color 25%, transparent 25%, transparent 50%, @stripe-color 50%, @stripe-color 75%, transparent 75%, transparent );
    background-image: -o-linear-gradient( @angle, @stripe-color 25%, transparent 25%, transparent 50%, @stripe-color 50%, @stripe-color 75%, transparent 75%, transparent );
    background-image: linear-gradient( @angle, @stripe-color 25%, transparent 25%, transparent 50%, @stripe-color 50%, @stripe-color 75%, transparent 75%, transparent );
  }
}

// Frontkit reusable elements
// --------------------------

// Link default styles
.link() {
  color: @link-color;

  &:hover {
    color: @link-color-hover;
    text-decoration: underline;
  }
}

// Input focus styles
.input-focus( @border-color: @input-border-focus ) {
  @inner-shadow-color: @border-color;
  @outer-shadow-color: fade( @inner-shadow-color, 15% );

  border-color: @border-color;
  outline: 0;
  .box-shadow( ~"inset 2px 0 @{inner-shadow-color}, 0 0 5px 3px @{outer-shadow-color}" );
}

// Input validation state styles
.input-validation-state( @name, @color ) {
  .validation-@{name} .input,
  .input.validation-@{name} {
    border-color: lighten( @color, 10% );
    color: @color;

    &:focus {
      .input-focus( @color );
    }
  }
}

// Button color variation
.button-variation( @bg: @brand-default, @text: @text-color, @border: @btn-border ) {
  border-color: @border;
  color: @text;
  background-color: @bg;

  &:hover,
  &:focus,
  &:active,
  &.active,
  .active & {
    border-color: darken( @border, 10% );
    color: @text;
    background-color: darken( @bg, 5% );
  }

  &[ disabled ],
  &.disabled,
  .disabled & {
    &,
    &:hover,
    &:focus,
    &:active
    &.active {
      border-color: @border;
      background-color: @bg;
    }
  }
}

// Button size variation
.button-size( @factor: 1 ) {
  padding: ( @padding-base-y * @factor ) ( @padding-base-x * @factor );
  font-size: unit( @factor, rem );
  border-radius: max( @btn-border-radius * @factor, @border-radius-small );
}

.make-triangle( @side, @size, @color ) {
  border: @size solid transparent;

  .triangle() when ( @side = down ) {
    border-top-color: @color;
    border-bottom: none;
  }

  .triangle() when ( @side = up ) {
    border-bottom-color: @color;
    border-top: none;
  }

  .triangle() when ( @side = left ) {
    border-right-color: @color;
    border-left: none;
  }

  .triangle() when ( @side = right ) {
    border-left-color: @color;
    border-right: none;
  }

  .triangle();
}

// Frontkit component helpers
// --------------------------

// Calculate the vertical spacing of a navbar component
.navbar-spacing( @height: @line-height-base, @prop: padding ) {
  @value: ( ( @navbar-height - @height ) / 2 ) - @one-px;

  @{prop}-top: @value;
  @{prop}-bottom: @value;
}

// Calculate the hypotenuse and extract it to a variable @hypotenuse
.calculate-hypotenuse( @x, @y ) {
  @hypotenuse: sqrt( pow( @x, 2 ) + pow( @y, 2 ) );
}

// Grid & Layouts
// --------------

// Helper for grid rows
.make-row() {
  .clear-float();

  // Negative margin the row out to align the content of columns
  margin-left: @grid-gutter-width * -1;
  margin-right: @grid-gutter-width * -1;
}

// Generate grid columns
.generate-grid-columns( @column-name, @columns-count ) {
  .span-x( @index ) when ( @index > 0 ) {
    .@{column-name}-@{index}-@{columns-count} { .span( @index ); }

    .span-x( ( @index - 1 ) );
  }

  .span( @columns  ) {
    width: percentage( ( @columns / @columns-count ) );
  }

  .span-x( @columns-count );
}

// Generate grid offsets
.generate-grid-offset( @column-name, @columns-count ) {
  .offset-x( @index ) when ( @index > 0 ) {
    .@{column-name}-offset-@{index}-@{columns-count} { .offset( @index ); }
    .offset-x( ( @index - 1 ) );
  }

  .offset( @columns  ) {
    margin-left: percentage( ( @columns / @columns-count ) );
  }

  // Because there is no why to offset a column by 100%, we start from the @columns-count - 1
  .offset-x( @columns-count - 1 );
}

// Generate golden ratio grid
.generate-golden-grid( @column-name ) {
  .@{column-name}-golden-long   { width: percentage( @golden-ratio ); }
  .@{column-name}-golden-short  { width: percentage( 1 - @golden-ratio ); }

  .@{column-name}-offset-golden-long  { margin-left: percentage( @golden-ratio ); }
  .@{column-name}-offset-golden-short { margin-left: percentage( 1 - @golden-ratio ); }
}

// Create all grid classes for a given column name
.all-grid-columns( @column-name, @grid-size: @grid-columns ) {
  .grid( @index ) when ( @index > 0 ) {
    .generate-grid-columns( @column-name, extract( @grid-size, @index ) );
    .generate-grid-offset( @column-name, extract( @grid-size, @index ) );

    .grid( @index - 1 );
  }

  .generate-golden-grid( @column-name );
  .grid( length( @grid-size ) );
}

// Generate block grids
.generate-block-grid( @column-name, @grid-size: @block-grid-columns ) {
  .span-x( @index ) when ( @index > 0 ) {
    .@{column-name}-block-grid-@{index} > * { .span( @index ); }
    .span-x( @index - 1 );
  }

  .span( @columns ) {
    width: ( 100% / @columns );
  }

  .span-x( @grid-size );
}

// Generate a media query for .container
.container-sizing( @screen, @container ) {
  @container-width: unit( @container / @font-size-base, rem );

  @media screen and ( min-width: @screen ) {
    .container {
      // To not use inner mixins, we use the min() function here
      max-width: min( @container-width, 80rem );
    }
  }
}

// Responsive Utilities
// --------------------
.responsive-visible() {
  display: inherit !important;
}

.responsive-invisible() {
  display: none !important;
}