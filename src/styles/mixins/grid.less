// Mixins - Grid
// -------------------------------------------------------------------------------------------------

// Helper for grid rows
.make-row() {
  .clear-float();

  // Negative margin the row out to align the content of columns
  margin-left: @grid-gutter-width * -1;
  margin-right: @grid-gutter-width * -1;
}

// Generate grid columns
.generate-grid-columns( @column-name, @columns-count ) {
  .span-x( @index ) when ( @index > 0 ) {
    .@{column-name}-@{index}-@{columns-count} { .span( @index ); }

    .span-x( ( @index - 1 ) );
  }

  .span( @columns  ) {
    width: percentage( ( @columns / @columns-count ) );
  }

  .span-x( @columns-count );
}

// Generate grid offsets
.generate-grid-offset( @column-name, @columns-count ) {
  .offset-x( @index ) when ( @index > 0 ) {
    .@{column-name}-offset-@{index}-@{columns-count} { .offset( @index ); }
    .offset-x( ( @index - 1 ) );
  }

  .offset( @columns  ) {
    margin-left: percentage( ( @columns / @columns-count ) );
  }

  // Because there is no why to offset a column by 100%, we start from the @columns-count - 1
  .offset-x( @columns-count - 1 );
}

// Generate grid ordering
.generate-grid-ordering( @column-name, @columns-count, @type ) {
  .order-x( @index ) when ( @index >= 0 ) {
    .@{column-name}-@{type}-@{index}-@{columns-count} { .order( @index ); }
    .order-x( @index - 1 );
  }

  // Pulling
  .order( @columns ) when ( @type = pull ) and ( @columns = 0 ) { right: auto; }
  .order( @columns ) when ( @type = pull ) and ( @columns > 0 ) {
    right: percentage( @columns / @columns-count );
  }

  // Pushing
  .order( @columns ) when ( @type = push ) and ( @columns = 0 ) { right: auto; }
  .order( @columns ) when ( @type = push ) and ( @columns > 0 ) {
    left: percentage( @columns / @columns-count );
  }

  .order-x( @columns-count );
}

// Generate golden ratio grid
.generate-golden-grid( @column-name ) {
  .@{column-name}-golden-long   { width: percentage( @golden-ratio ); }
  .@{column-name}-golden-short  { width: percentage( 1 - @golden-ratio ); }

  .@{column-name}-offset-golden-long  { margin-left: percentage( @golden-ratio ); }
  .@{column-name}-offset-golden-short { margin-left: percentage( 1 - @golden-ratio ); }
}

// Create all grid classes for a given column name
.all-grid-columns( @column-name, @grid-size: @grid-columns ) {
  .grid( @index ) when ( @index > 0 ) {
    .generate-grid-columns( @column-name, extract( @grid-size, @index ) );
    .generate-grid-offset( @column-name, extract( @grid-size, @index ) );
    .generate-grid-ordering( @column-name, extract( @grid-size, @index ), pull );
    .generate-grid-ordering( @column-name, extract( @grid-size, @index ), push );

    .grid( @index - 1 );
  }

  .generate-golden-grid( @column-name );
  .grid( length( @grid-size ) );
}

// Generate block grids
.generate-block-grid( @column-name, @grid-size: @block-grid-columns ) {
  .span-x( @index ) when ( @index > 0 ) {
    .@{column-name}-block-grid-@{index} > * { .span( @index ); }
    .span-x( @index - 1 );
  }

  .span( @columns ) {
    width: ( 100% / @columns );
  }

  .span-x( @grid-size );
}